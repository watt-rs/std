/// Imports
use std/io as io
use std/convert as conv
use std/option for Option

/// Externs
extern fn list_new(): dyn = "return [];"
extern fn list_get(list: dyn, idx: int): Option = "return list[idx]"

/// Simple list wrapper
pub type List {
  /// Raw list
  let list = list_new()

  /// Pushes element to list
  pub fn push(val: dyn) =
    self.list.push(val)

  /// Gets length of list
  pub fn len(): int =
    self.list.length

  /// Deletes element
  pub fn delete(index: int) =
    if index > -1 && index < self.len() {
      self.list.splice(index, 1);
    }

  /// Unshifts element to list
  pub fn unshift(val: dyn) =
    self.list.unshift(val)

  /// Gets index of element
  pub fn index_of(val: dyn) =
    self.list.indexOf(val)

  /// Pops element from list
  pub fn pop(): dyn =
    self.list.pop()

  /// Shifts element from list
  pub fn shift(): dyn =
    self.list.shift()

  /// Checks element existence in list
  pub fn contains(value: dyn): bool =
    self.list.contains(value)

  /// Gets element by index
  pub fn get(index: int): Option =
    if index > -1 && index < self.len() =
      Option.Some(list_get(self.list, index))
    else =
      Option.None()

  /// Copies the list
  pub fn copy(): List {
    let list = List();
    list.list = self.list.slice();
    list
  }

  /// Converts into string by join
  pub fn join(by: string): string =
    self.list.join(by)

  /// Converts into string
  pub fn to_string(): string =
    "[" <> self.join(", ") <> "]"
}
